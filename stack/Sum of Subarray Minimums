class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        const int mod = 1e9 + 7;
        vector<int> left(n, 0);   // Initialize and resize the vector
        vector<int> right(n, 0);  // Initialize and resize the vector
        stack<pair<int, int>> sleft;
        stack<pair<int, int>> sright;

        for (int i = 0; i < n; i++) {
            int cnt = 1;
            while (!sleft.empty() && sleft.top().first > arr[i]) {
                cnt += sleft.top().second;
                sleft.pop();
            }
            sleft.push({arr[i], cnt});
            left[i] = cnt;
        }

        for (int i = n - 1; i >= 0; i--) {
            int cnt = 1;
            while (!sright.empty() && sright.top().first >= arr[i]) {
                cnt += sright.top().second;
                sright.pop();
            }
            sright.push({arr[i], cnt});
            right[i] = cnt;
        }

        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + ((long long)arr[i] * left[i] * right[i]) % mod) % mod;
        }
        return ans;
    }
};
