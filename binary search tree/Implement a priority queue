int pop(vector<int> &heap)
{
    if (heap.size() == 0) {
        return -1; // Heap is empty
    }
    else {
        int x = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        int parent = 0;
        int n = heap.size();

        while (true) {
            int leftchild = 2 * parent + 1;
            int rightchild = 2 * parent + 2;
            int largest = parent;

            if (leftchild < n && heap[leftchild] > heap[largest]) {
                largest = leftchild;
            }
            if (rightchild < n && heap[rightchild] > heap[largest]) {
                largest = rightchild;
            }
            if (largest != parent) {
                swap(heap[largest], heap[parent]);
                parent = largest; // Update parent index
            }
            else {
                break;
            }
        }
        return x;
    }
}

// Code Snippet of the push function: 
//
//     void push(vector<int> &heap, int x)
//     {
//           heap.push_back(x);
//
//            // Posistion of the current inserted element.
//            int pos=heap.size()-1;
//
//            // Shifting the element up until it reaches the top most node if it is larger than its parent.
//            while(pos>0)
//            {
//                int parent = (pos-1)/2;
//                if(heap[pos] > heap[parent])
//                {
//                    swap(heap[parent],heap[pos]);
//                    pos=parent;
//               }
//              else
//              {
//                  // As parent is larger the element now is in its correct position. 
//                  break;
//              }
//          }
//      }
