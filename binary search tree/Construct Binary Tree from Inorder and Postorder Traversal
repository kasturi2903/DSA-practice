/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(vector <int>& inorder,int inStart,int inEnd,vector <int>& postorder,int postStart, int postEnd, map<int,int>& mp ){
        if(postStart>postEnd || inStart>inEnd) return nullptr;
         
        TreeNode* root = new TreeNode(postorder[postEnd]);
        int elem = mp[root->val];
        int nelem= elem-inStart;
        root -> left = constructTree(inorder,inStart,elem-1, postorder,postStart, postStart+nelem-1, mp);
        root -> right = constructTree(inorder,elem+1,inEnd, postorder,postStart+nelem, postEnd-1, mp);

       return root;

    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postStart =0;
        int postEnd= postorder.size()-1;
        int inStart=0;
        int inEnd= inorder.size()-1;
        map <int,int> mp;
        for(int i=inStart;i<=inEnd;i++){
           mp[inorder[i]]=i;
        }

        return constructTree(inorder,inStart,inEnd,postorder,postStart,postEnd,mp);
    }
};
